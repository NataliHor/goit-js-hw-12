import{a as d,S as x,i as c}from"./assets/vendor-b11e2a50.js";(function(){const s=document.createElement("link").relList;if(s&&s.supports&&s.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))i(e);new MutationObserver(e=>{for(const r of e)if(r.type==="childList")for(const l of r.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&i(l)}).observe(document,{childList:!0,subtree:!0});function t(e){const r={};return e.integrity&&(r.integrity=e.integrity),e.referrerPolicy&&(r.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?r.credentials="include":e.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function i(e){if(e.ep)return;e.ep=!0;const r=t(e);fetch(e.href,r)}})();const L="https://pixabay.com/api/",S="44809751-3b2ccf197f9e8e95d68b14f11";async function f({q:a="",page:s=1,per_page:t=15}={}){try{return(await d.get(`${L}`,{params:{key:S,q:a,image_type:"photo",orientation:"horizontal",safesearch:!0,page:s,per_page:t,language:"en"}})).data}catch(i){throw console.error("Error fetching images:",i),i}}let q=new x(".gallery-item a",{captionsData:"alt",captionDelay:250}).refresh();function p(a){const s=document.querySelector(".gallery"),t=a.map(({webformatURL:i,largeImageURL:e,tags:r,likes:l,views:u,comments:h,downloads:m})=>`
        <li class="gallery-item">
          <a href="${e}">
            <img src="${i}" alt="${r}" loading="lazy" class="gallery-image"/>
          </a>
          <ul class="info">
            <li class="info-item"> <h2 class="info-text">Likes</h2> <p class="info-value">${l}</p> </li>
            <li class="info-item"> <h2 class="info-text">Views</h2> <p class="info-value">${u}</p> </li>
            <li class="info-item"> <h2 class="info-text">Comments</h2> <p class="info-value">${h}</p> </li>
            <li class="info-item"> <h2 class="info-text">Downloads</h2> <p class="info-value">${m}</p> </li>
          </ul>
        </li>
    `).join("");s.innerHTML+=t,q.refresh()}const v=document.querySelector(".gallery"),w=document.querySelector(".search-form"),y=document.querySelector(".loading"),n=document.querySelector(".load-btn"),o={q:"",page:1,per_page:15,maxPage:0};w.addEventListener("submit",P);async function P(a){a.preventDefault(),v.innerHTML="",o.page=1;const s=a.currentTarget;if(o.q=s.elements.query.value.toLowerCase(),o.q===""){c.error({position:"topRight",message:"Sorry, there are no images matching your search query. Please try again!"});return}y.style.display="flex";try{const t=await f(o);t.hits.length===0?(n.style.display="none",c.error({position:"topRight",message:"Sorry, there are no images matching your search query. Please try again!!!"})):(o.maxPage=Math.ceil(t.totalHits/o.per_page),p(t.hits),t.hits.length>0&&t.hits.length!==t.totalHits&&(n.style.display="flex",n.addEventListener("click",g))),o.page===o.maxPage&&(c.info({position:"topRight",message:"We're sorry, but you've reached the end of search results."}),n.style.display="none",n.removeEventListener("click",g))}catch{c.error({position:"topRight",message:"Sorry, there was an error fetching images. Please try again later!"}),n.style.display="none"}finally{y.style.display="none"}}async function g(){n.style.display="none",y.style.display="flex",o.page+=1;try{const a=await f(o);p(a.hits);const t=document.querySelector(".gallery").getBoundingClientRect().height;window.scrollBy({top:t*2,behavior:"smooth"}),n.style.display="flex"}catch{c.error({position:"topRight",message:"Sorry, there was an error fetching images. Please try again later!"})}finally{y.style.display="none"}}
//# sourceMappingURL=commonHelpers.js.map
